on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]

# Workflow to run continuous integration builds for each commit/PR,
# and then upload the artifacts to our staging server
name: staging
env:
  BASE_STAGING_URL: https://staging.docs.archit.us
  ARCHIVE_NAME: dist.tar.gz

jobs:
  build:
    name: Build
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    steps:
      - name: Store build time
        id: build-time
        shell: bash
        run: >-
          echo "::set-output name=time::$(date --iso-8601=seconds)"

      - name: Add pre comment to PR
        # Run even on push so we can access outputs for build markers
        id: staging-comment
        uses: architus/staging-comment-action@master
        with:
          mode: pre
          job-name: Build
          build-time: ${{ steps.build-time.outputs.time }}
          base-staging-url: ${{ env.BASE_STAGING_URL }}
          GITHUB_TOKEN: ${{ secrets.ARCHITUS_BOT_TOKEN }}

      - uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Resolve staging URL
        id: resolve-staging
        shell: bash
        run: >-
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
              ref=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }');
              event="pr";
          else
              ref=$(echo $GITHUB_SHA | cut -c1-7);
              event="commit";
          fi;
          echo "::set-output name=path::${event}/${ref}";

      - name: Build website
        id: build
        shell: bash
        env:
          APP_NAME: Architus Docs Staging
          SITE_ROOT: ${{ env.BASE_STAGING_URL }}
          NODE_ENV: production
          BASE_PATH: /${{ steps.resolve-staging.outputs.path }}
          GITHUB_BRANCH: ${{ steps.staging-comment.outputs.branch }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GATSBY_ALGOLIA_KEY: ${{ secrets.GATSBY_ALGOLIA_KEY }}
        # Build the website from a bash script, tracking the build duration
        # and re-raising the resultant exit code from the build command
        run: >-
          T="$(date +%s)";

          yarn build --prefix-paths;
          exit_code=$?;

          T="$(($(date +%s)-T))";
          echo "::set-output name=duration::${T}";
          echo "Build finished in $T seconds with exit code $exit_code";
          exit $exit_code;

      - name: Create archive
        run: tar -czvf ../${{ env.ARCHIVE_NAME }} .
        working-directory: public

      - name: Upload built archive to staging API
        uses: architus/upload-api-action@master
        with:
          archive-path: ./${{ env.ARCHIVE_NAME }}
          api-root: ${{ env.BASE_STAGING_URL }}/api
          token: ${{ secrets.STAGING_UPLOAD_API_TOKEN }}

      - name: Add post comment to PR
        uses: architus/staging-comment-action@master
        if: github.event_name == 'pull_request' && success()
        with:
          mode: post
          job-name: Build
          build-time: ${{ steps.build-time.outputs.time }}
          build-duration: ${{ steps.build.outputs.duration }}
          base-staging-url: ${{ env.BASE_STAGING_URL }}
          GITHUB_TOKEN: ${{ secrets.ARCHITUS_BOT_TOKEN }}

      - name: Add failure comment to PR
        uses: architus/staging-comment-action@master
        if: github.event_name == 'pull_request' && failure()
        with:
          mode: failure
          job-name: Build
          build-time: ${{ steps.build-time.outputs.time }}
          base-staging-url: ${{ env.BASE_STAGING_URL }}
          GITHUB_TOKEN: ${{ secrets.ARCHITUS_BOT_TOKEN }}
